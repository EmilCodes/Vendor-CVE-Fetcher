import requests
import pandas as pd
import time
VENDOR = "microsoft"

def cves_json_to_dataset(data, dataset):
    cves = data['vulnerabilities']
    # Iterate through the CVEs and add the relevant data to the dataset
    for cve in cves:
        cveID = cve['cve']['id']
        print(cveID)
        published = cve['cve']['published'].split("T")[0]
        description = cve['cve']['descriptions'][0]['value']
            
        try:
            cvssScore = cve['cve']['metrics']['cvssMetricV31'][0]['cvssData']['baseScore']
            try:
                cvssSeverity = cve['cve']['metrics']['cvssMetricV31'][0]['baseSeverity']
            except KeyError:
                cvssSeverity = cve['cve']['metrics']['cvssMetricV31'][0]['cvssData']['baseSeverity']
        except KeyError:
            try:
                cvssScore = cve['cve']['metrics']['cvssMetricV30'][0]['cvssData']['baseScore']
                cvssSeverity = cve['cve']['metrics']['cvssMetricV30'][0]['baseSeverity']
                
            except KeyError:
                cvssScore = cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['baseScore']
                cvssSeverity = cve['cve']['metrics']['cvssMetricV2'][0]['baseSeverity']

        try:
            attackVector = cve['cve']['metrics']['cvssMetricV31'][0]['cvssData']['attackVector']
            attackComplexity = cve['cve']['metrics']['cvssMetricV31'][0]['cvssData']['attackComplexity']
            privilegesRequired = cve['cve']['metrics']['cvssMetricV31'][0]['cvssData']['privilegesRequired']
            userInteraction = cve['cve']['metrics']['cvssMetricV31'][0]['cvssData']['userInteraction']
            confidentialityImpact = cve['cve']['metrics']['cvssMetricV31'][0]['cvssData']['confidentialityImpact']
            integrityImpact = cve['cve']['metrics']['cvssMetricV31'][0]['cvssData']['integrityImpact']
            availabilityImpact = cve['cve']['metrics']['cvssMetricV31'][0]['cvssData']['availabilityImpact']
            exploitabilityScore = cve['cve']['metrics']['cvssMetricV31'][0]['exploitabilityScore']
            impactScore = cve['cve']['metrics']['cvssMetricV31'][0]['impactScore']
            
        except KeyError:
            try:
                attackVector = cve['cve']['metrics']['cvssMetricV30'][0]['cvssData']['attackVector']
                attackComplexity = cve['cve']['metrics']['cvssMetricV30'][0]['cvssData']['attackComplexity']
                privilegesRequired = cve['cve']['metrics']['cvssMetricV30'][0]['cvssData']['privilegesRequired']
                userInteraction = cve['cve']['metrics']['cvssMetricV30'][0]['cvssData']['userInteraction']
                confidentialityImpact = cve['cve']['metrics']['cvssMetricV30'][0]['cvssData']['confidentialityImpact']
                integrityImpact = cve['cve']['metrics']['cvssMetricV30'][0]['cvssData']['integrityImpact']
                availabilityImpact = cve['cve']['metrics']['cvssMetricV30'][0]['cvssData']['availabilityImpact']
                exploitabilityScore = cve['cve']['metrics']['cvssMetricV30'][0]['exploitabilityScore']
                impactScore = cve['cve']['metrics']['cvssMetricV30'][0]['impactScore']
                
            except KeyError:
                attackVector = cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['accessVector']
                attackComplexity = cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['accessComplexity']
                # privilegeRequired is missing
                userInteraction = cve['cve']['metrics']['cvssMetricV2'][0]['userInteractionRequired']
                confidentialityImpact = cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['confidentialityImpact']
                integrityImpact = cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['integrityImpact']
                availabilityImpact = cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['availabilityImpact']
                exploitabilityScore = cve['cve']['metrics']['cvssMetricV2'][0]['exploitabilityScore']
                impactScore = cve['cve']['metrics']['cvssMetricV2'][0]['impactScore']
                acInsufInfo = cve['cve']['metrics']['cvssMetricV2'][0]['acInsufInfo'] # A boolean - whether there's insufficient info or not


        # Get the vulnerable versions of only the required vendor
        versions = []
        nodes = cve['cve']['configurations'][0]['nodes']
        for node in nodes:
            cpeMatch = node["cpeMatch"]
            for product in cpeMatch:
                criteria = product["criteria"]
                if criteria.split(":")[3] == VENDOR:
                    versions.append(criteria)


        
        # Add the parsed data to the dataset
        dataset.append([cveID, published, description, cvssScore, cvssSeverity, versions, attackVector, attackComplexity, userInteraction, confidentialityImpact, integrityImpact, availabilityImpact, exploitabilityScore, impactScore
 ])
        
def main():
    # Make an API call to the NVD API to get all CVEs related to VENDOR products
    url = rf'https://services.nvd.nist.gov/rest/json/cves/2.0?virtualMatchString=cpe:2.3:*:{VENDOR}'
    
    r = requests.get(url)

    data = r.json()
    dataset = []
    cves_json_to_dataset(data, dataset)
    
    # Check if totalResults is larger than resultsPerPage and calculate the start indexes for the rest of the results
    total_res = data["totalResults"]
    res_per_page = data["resultsPerPage"]
    rep_number = total_res//res_per_page + (total_res % res_per_page > 0)
    if rep_number > 1:
        for rep in range(1, rep_number):
            start_index = res_per_page*(rep)
            url = rf"https://services.nvd.nist.gov/rest/json/cves/2.0?virtualMatchString=cpe:2.3:*:{VENDOR}&resultsPerPage={res_per_page}&startIndex={start_index}"
            # Sleep for 6 seconds as instructed by the NVD API guide
            time.sleep(6)
            r = requests.get(url)
            data = r.json()
            cves_json_to_dataset(data, dataset)
        
    # Create the dataset
    df = pd.DataFrame(dataset, columns = ['cveID', 'published', 'description', 'cvssScore', 'cvssSeverity', 'versions', 'attackVector', 'attackComplexity', 'userInteraction', 'confidentialityImpact', 'integrityImpact', 'availabilityImpact', 'exploitabilityScore', 'impactScore'
])
    print(df.head())

    df.to_csv("{}_cves.csv".format(VENDOR))
    
if __name__ == "__main__":
    main()

